% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Experiment.R
\name{Experiment}
\alias{Experiment}
\title{Experiment}
\description{
Container object for machine learning experiments.
}
\section{Usage}{
\preformatted{e = Experiment$new(task, learner, ...)
e$train(subset)
e$predict(subset, newdata)
e$score()

e$model
e$prediction
e$performance

e$train_set
e$test_set
e$validation_set
e$timings
e$state
}
}

\section{Arguments}{

\itemize{
\item \code{task} (\link{Task}): Task to conduct experiment on
\item \code{learner} (\link{Learner}): Learner to conduct experiment with.
\item \code{subset} (\code{integer} | \code{character}): Subset of the task's row ids to work on.
\item \code{newdata} (\code{data.frame}): New data to predict on. Will be added to the task.
}
}

\section{Details}{

\code{new()} initializes a new machine learning experiment which can grow in a stepwise fashion.

\code{train()} fits the induces \code{learner} on the (subset of the) \code{task} and internally stores the model.
The model can be accessed via \code{e$model}.

\code{predict()} uses the previously fitted model to predict new observations.
The predictions are stored internally as an \link{Prediction} object and can be accessed via \code{e$prediction}.

\code{score()} quantifies stored predictions using the task's \link{Measure} and stores the resulting performance.
The performance can be accessed via \code{e$performance}.

\code{train_set} and \code{test_set} return the row ids of the training set or test set, respectively.
If there is a validation set (see \link{Task}), \code{validation_set} returns the corresponding row ids.

\code{timings} holds the elapsed time for the steps \code{train}, \code{predict} and \code{score} in seconds with up to millisecond accuracy (see \code{\link[base:proc.time]{base::proc.time()}}).
Timings are \code{NA} if the step has not been performed yet.

\code{state} returns an factor of length 1 with ordered levels \code{"defined"}, \code{"trained"}, \code{"predicted"} and \code{"scored"}.
}

\examples{
e = Experiment$new(
  task = mlr_tasks$get("iris"),
  learner = mlr_learners$get("classif.rpart")
)
print(e)
e$state

e$train(subset = 1:120)
print(e)
e$state
e$model

e$predict(subset = 121:150)
print(e)
e$state
e$prediction

e$score()
print(e)
e$state
e$performance

e$train_set
e$test_set
e$timings
}
