% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bundle.R
\name{bundling}
\alias{bundling}
\alias{learner_unbundle}
\alias{learner_bundle}
\alias{learner_bundled}
\title{(Un)bundle a Learner}
\usage{
learner_unbundle(learner)

learner_bundle(learner)

learner_bundled(learner)
}
\arguments{
\item{learner}{\code{\link{Learner}}\cr
The learner to bundle.}
}
\description{
Bundling is the process of processing the model of a trained \code{\link{Learner}} so it an be successfully serialized and
deserialized. The naming is inspired from \CRANpkg{bundle}.

The function:
\itemize{
\item \code{learner_bundle(learner)}:
Replaces the learner's model with the bundled model (in-place).
\item `learner_unbundle(learner) :
Replaces the learner's model with the unbundled model (in-place).
\item \code{learner_bundled(learner)}:
returns \code{FALSE} if the learner is either not trained or not bundled, otherwise \code{TRUE}.
Does not modify the learner.
}

All three functions are primarily intended to be used when implementing bundling for a \code{\link{Learner}}.
Users who want to (un)bundle a \code{\link{Learner}} can instead use the public methods \verb{$bundle()} and \verb{$unbundle()} or the
field \verb{$bundled}, which is more in line with \code{mlr3}'s object oriented design.
}
\section{Implementing Bundling for a Learner}{

In order to implement bundling for a \code{\link{Learner}}, you need to add:
\itemize{
\item the public methods \verb{$bundle()} and \verb{$unbundle()}, where you call \code{learner_bundle(self)} and
\code{learner_unbundle(self)} respectively.
\item the active binding \verb{$bundled}, where you simply call \code{learner_bundled(self)}.
\item the private method \verb{$.bundle(model)}, which takes in a \code{\link{Learner}}'s model and returns it in bundled form,
without modifying the learner's state. Must not depend on the learner's state.
\item the private method \verb{$.unbundle(model)}, which takes in a \code{\link{Learner}}'s bundled model and returns it in
unbundled form. Must not depend on the learner's state.
}

To test the bundling implementation, you can use the internal test helper \code{expect_bundleable()}.
This is also run in \code{expect_learner()} when a task is provided.

For a concrete example on how to implement bundling, see the \code{LearnerTorch} class from
\href{https://github.com/mlr-org/mlr3torch}{mlr3torch}.
}

\keyword{internal}
