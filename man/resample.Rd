% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resample.R
\name{resample}
\alias{resample}
\title{Resample a Learner on a Task}
\usage{
resample(task, learner, resampling, ctrl = list())
}
\arguments{
\item{task}{:: (\link{Task} | \code{character(1)})\cr
Object of type \link{Task}.
Instead if a \link{Task} object, it is also possible to provide a key to retrieve a task from the \link{mlr_tasks} dictionary.}

\item{learner}{:: (\link{Learner} | \code{character(1)})\cr
Object of type \link{Learner}.
Instead if a \link{Learner} object, it is also possible to provide a key to retrieve a learner from the \link{mlr_learners} dictionary.}

\item{resampling}{:: (\link{Resampling} | \code{character(1)})\cr
Object of type \link{Resampling}.
Instead if a \link{Resampling} object, it is also possible to provide a key to retrieve a resampling from the \link{mlr_resamplings} dictionary.}

\item{ctrl}{:: named \code{list()}\cr
Object to control learner execution. See \code{\link[=mlr_control]{mlr_control()}} for details.}
}
\value{
\link{ResampleResult}.
}
\description{
Runs a resampling (possibly in parallel).
}
\note{
The fitted models are discarded after the predictions have been scored in order to reduce memory consumption.
If you need access to the models for later analysis, set \code{store_model} to \code{TRUE} via \code{\link[=mlr_control]{mlr_control()}}.
}
\section{Parallelization}{

This function can be parallelized with the \CRANpkg{future} package.
One jobs is one resampling iteration, and all jobs are forwarded to the \CRANpkg{future} package together.
To select a parallel backend, use \code{\link[future:plan]{future::plan()}}.
}

\examples{
task = mlr_tasks$get("iris")
learner = mlr_learners$get("classif.rpart")
resampling = mlr_resamplings$get("cv")

# explicitly instantiate the resampling for this task for reproduciblity
set.seed(123)
resampling$instantiate(task)

rr = resample(task, learner, resampling)
print(rr)

# retrieve performance
rr$performance("classif.ce")
rr$aggregate("classif.ce")

# merged prediction objects of all resampling iterations
pred = rr$prediction
pred$confusion

# Repeat resampling with featureless learner
rr.featureless = resample(task, "classif.featureless", resampling)

# Combine the ResampleResults into a BenchmarkResult
bmr = rr$combine(rr.featureless)
print(bmr)
}
