% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mlr_control.R
\name{mlr_control}
\alias{mlr_control}
\title{Execution control object}
\usage{
mlr_control(...)
}
\arguments{
\item{...}{Named arguments to overwrite the defaults / options.}
}
\value{
(named \code{list()}). If no argument is provided, returns all settings as named list.
If arguments are provided in a \code{name = value} fashion, the settings are returned as named list
after some argument checks.
}
\description{
This function creates a named list of settings which control the execution of an \link{Experiment}.
\itemize{
\item \code{store_model}: If \code{FALSE}, the model returned by the learner is discarded in order to save some memory after the experiment is completed.
Note that you will be unable to further predict on new data.
\item \code{store_prediction}: If \code{FALSE}, the predictions are discarded in order to save some memory after the experiment is completed.
\item \code{encapsulate}: How to call external code, e.g. train and predict methods of third party packages.
If not set or \code{NULL} (default), the code is executed in the running session without error handling.
\item \code{use_future}: Set to \code{FALSE} to disable parallelization via \pkg{future}. This sometimes simplifies debugging.
}
}
\examples{
# get a list of the defaults
mlr_control()

# get a control object, with the default of store_model switched to FALSE
mlr_control(store_model = FALSE)
}
