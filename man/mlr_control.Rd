% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mlr_control.R
\name{mlr_control}
\alias{mlr_control}
\title{Execution Control Object}
\usage{
mlr_control(...)
}
\arguments{
\item{...}{:: any\cr
Named arguments to overwrite the defaults / options.
Settings may be provided in a \code{name = value} fashion, or by providing a single named \code{list()}.}
}
\value{
(named \code{list()}) of all settings.
}
\description{
This function creates a named list of settings which control the execution of a \link{Learner}.
\itemize{
\item \code{store_model} (\code{logical(1))}:\cr
If \code{FALSE} (default), models fitted during \code{\link[=resample]{resample()}} and \code{\link[=benchmark]{benchmark()}} are discarded.
Note that you will be unable to predict on new data or extract additional information like
variable importance from the learner.
\item \code{encapsulate_train} (\code{character(1)}):\cr
How to call external code in third party packages during train.
\itemize{
\item If set to \code{"none"} (default), the code is executed in the running session without error handling.
Output is not stored, just send to the console.
\item If set to \code{"evaluate"}, the exceptions are caught using \code{\link[evaluate:evaluate]{evaluate::evaluate()}}.
All output can be accessed via the learner field \code{$log}.
\CRANpkg{evaluate} does not start a separate session, and thus cannot guard you against segfaults.
\item If set to \code{"callr"}, the code is executed in an independent R session using the \CRANpkg{callr} package.
All output can be accessed via the learner field \code{$log}.
This guards your session from segfaults, at the cost of some computational overhead.
}
\item \code{encapsulate_predict} (\code{character(1)}):\cr
How to call external code in third party packages during predict. Same format as \code{encapsulate_train}.
}

\strong{Defaults}\preformatted{$store_model
TRUE

$encapsulate_train
"none"

$encapsulate_predict
"none"

$log_threshold
400
}
}
\examples{
# get a list of the defaults
mlr_control()
}
