% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mlr_control.R
\name{mlr_control}
\alias{mlr_control}
\title{Execution Control Object}
\usage{
mlr_control(...)
}
\arguments{
\item{...}{Named arguments to overwrite the defaults / options.}
}
\value{
(named \code{list()}). If no argument is provided, returns all settings as named list.
If arguments are provided in a \code{name = value} fashion, the settings are returned as named list
after some argument checks.
}
\description{
This function creates a named list of settings which control the execution of an \link{Experiment}.
\itemize{
\item \code{store_model}: If \code{FALSE}, the model returned by the learner is discarded in order to save some memory after the experiment is completed.
Note that you will be unable to further predict on new data.
\item \code{store_prediction}: If \code{FALSE}, the predictions are discarded in order to save some memory after the experiment is completed.
\item \code{encapsulate_train}: How to call external code in third party packages during train.
\itemize{
\item If set to \code{"none"} (default), the code is executed in the running session without error handling.
Output is not stored, just send to the console.
\item If set to \code{"evaluate"}, the exceptions are caught using \code{\link[evaluate:evaluate]{evaluate::evaluate()}}, and output is stored in a \link{Log} of the corresponding \link{Experiment}.
\item If set to \code{"callr"}, the code is executed in an independent R session. This guards your session from segfaults,
at the cost of some computational overhead. Logs are also stored in the \link{Experiment}.
}

See \link{Log} for an example.
\item \code{encapsulate_predict}: How to call external code in third party packages during predict.
Same format as \code{encapsulate_train}.
See \link{Log} for an example.
}
}
\examples{
# get a list of the defaults
mlr_control()

# get a control object, with the default of store_model changed to FALSE
mlr_control(store_model = FALSE)
}
