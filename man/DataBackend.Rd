% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DataBackend.R
\docType{data}
\name{DataBackend}
\alias{DataBackend}
\title{DataBackend}
\format{\link[R6:R6Class]{R6::R6Class} object.}
\description{
This is the abstract base class for data backends.
See \link{DataBackendDataTable} or \link{DataBackendMatrix} for exemplary implementations of this interface.

Data Backends provide a layer of abstraction for various data storage systems.
The required set of operations to implement is listed in the Methods section.

Note that all data access is handled transparently via the \link{Task}.
It is not recommended to work directly with the DataBackend.
}
\section{Construction}{
\preformatted{DataBackend$new(data, primary_key = NULL)
}
\itemize{
\item \code{data} :: \code{any}\cr
The format of the input data depends on the specialization.
E.g., \link{DataBackendDataTable} expects a \code{\link[data.table:data.table]{data.table::data.table()}} and \link{DataBackendMatrix} expects a \code{\link[Matrix:Matrix]{Matrix::Matrix()}}
constructed with the \CRANpkg{Matrix} package.
\item \code{primary_key} :: \code{character(1)}\cr
Each DataBackend needs a way to address rows, which is typically handled by a \code{primary_key} column of unique values.
The use of this variable may differ between backends.
}
}

\section{Fields}{

\itemize{
\item \code{nrow} :: \code{integer(1)}\cr
Number of rows (observations).
\item \code{ncol} :: \code{integer(1)}\cr
Number of columns (variables), including the primary key column.
\item \code{colnames} :: \code{character()}\cr
Returns vector of all column names, including the primary key column.
\item \code{rownames} :: \code{integer()} | \code{character()}\cr
Returns vector of all distinct row identifiers, i.e. the primary key column.
\item \code{hash} :: \code{character(1)}\cr
Returns a unique hash for this backend. This hash is cached.
\item \code{data_formats} :: \code{character()}\cr
Vector of supported data formats.
A specific format of these supported formats can be picked in the \code{$data()} method.
}
}

\section{Methods}{

\itemize{
\item \code{data(rows = NULL, cols = NULL, format = "data.table")}\cr
(\code{integer()} | \code{character()}, \code{character()}) -> \code{any}\cr
Returns a slice of the data in a specific format.
Currently, the only supported format is "data.table".
The rows must be addressed as vector of primary key values, columns must be referred to via column names.
Non-existing rows and columns are silently ignored.
\item \code{distinct(rows, cols)}\cr
(\code{integer()} | \code{character()}, \code{character()}) -> named \code{list()}\cr
Returns a named list of vectors of distinct values for each column specified.
Non-existing columns are silently ignored.
If \code{rows} is \code{NULL}, all possible distinct values will be returned, even if they do not occur.
This affects factor-like variables with empty levels.
\item \code{head(n = 6)}\cr
\code{integer(1)} -> \code{\link[data.table:data.table]{data.table::data.table()}}\cr
Returns the first up-to \code{n} rows of the data as \code{\link[data.table:data.table]{data.table::data.table()}}.
\item \code{missings(rows, cols)}\cr
(\code{integer()} | \code{character()}, \code{character()}) -> named \code{integer()}\cr
Returns the number of missing values per column in the specified slice of data.
Non-existing rows and columns are silently ignored.
}
}

\examples{
data = data.table::data.table(id = 1:5, x = runif(5), y = sample(letters[1:3], 5, replace = TRUE))

b = DataBackendDataTable$new(data, primary_key = "id")
print(b)
b$head(2)
b$data(rows = 1:2, cols = "x")
b$distinct(rows = b$rownames, "y")
b$missings(rows = b$rownames, cols = names(data))
}
\seealso{
Other DataBackend: \code{\link{DataBackendDataTable}},
  \code{\link{DataBackendMatrix}},
  \code{\link{as_data_backend}}
}
\concept{DataBackend}
\keyword{datasets}
