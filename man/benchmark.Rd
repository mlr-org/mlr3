% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/benchmark.R
\name{benchmark}
\alias{benchmark}
\title{Benchmark Multiple Learners on Multiple Tasks}
\usage{
benchmark(design, ctrl = list())
}
\arguments{
\item{design}{(\code{\link[=data.frame]{data.frame()}}):
Data frame (or \code{\link[=data.table]{data.table()}}) with three columns: "task", "learner", and "resampling".
Each row defines a set of resampled experiments by providing a \link{Task}, \link{Learner} and \link{Resampling} strategy.
The helper function \code{\link[=expand_grid]{expand_grid()}} can assist in generating an exhaustive design (see examples).}

\item{ctrl}{(named \code{list} as returned by \code{\link[=mlr_control]{mlr_control()}}):
Object to control experiment execution. See \code{\link[=mlr_control]{mlr_control()}}.}
}
\value{
\link{BenchmarkResult}.
}
\description{
Runs a benchmark of the cross-product of learners, tasks, and resampling strategies (possibly in parallel).

Resamplings which are not already instantiated will be instantiated automatically.
Note that these auto-instantiated resamplings will not be synchronized per task, i.e. learners will
see different splits of the same task.

To generate exhaustive designs and automatically instantiate resampling strategies per task, see \code{\link[=expand_grid]{expand_grid()}}.
}
\examples{
\dontshow{
   set.seed(123)
   .threshold = logger::log_threshold(namespace = "mlr3")
   logger::log_threshold(logger::WARN, namespace = "mlr3")
}
tasks = mlr_tasks$mget(c("iris", "sonar"))
learners = mlr_learners$mget(c("classif.featureless", "classif.rpart"))
resamplings = mlr_resamplings$mget("holdout")

design = expand_grid(tasks, learners, resamplings)
print(design)
bmr = benchmark(design)

# performance for all conducted experiments
head(as.data.table(bmr))

# aggregated performance values
bmr$aggregated

# Overview of of resamplings that were conducted internally
rrs = bmr$resample_results
print(rrs)

# Extract first ResampleResult
rr = bmr$resample_result(hash = rrs$hash[1])
print(rr)

# Extract predictions of first experiment of this resampling
head(as.data.table(rr$experiment(1)$prediction))
\dontshow{
   logger::log_threshold(.threshold, namespace = "mlr3")
}
}
