% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Resampling.R
\name{Resampling}
\alias{Resampling}
\title{Abstract resampling class}
\description{
Abstraction for resampling strategies.

Predefined resamplings are stored in \link{mlr_resamplings}.
}
\section{Usage}{
\preformatted{r = Resampling$new(id)
r$id
r$iters
r$par_set
r$par_vals
r$instantiate(task)
r$is_instantiated
r$instance
r$train_set(i)
r$test_set(i)
r$hash
}
}

\section{Arguments}{

\itemize{
\item \code{id} (\code{character(1)}):
identifier for this object.
\item \code{i} (\code{integer(1)}):
Get the \code{i}-th training/test set.
}
}

\section{Details}{

\code{$new()} creates a new object of class \link{Resampling}.

\code{$id} (\code{character(1)}) stores the identifier of the object.

\code{$iters} (\code{integer(1)}) calculates the resulting number of iterations, given the current \code{par_vals}.

\code{$par_set} (\code{[paradox::ParamSet()]}) describes available parameters.

\code{$par_vals} (\code{named list}) stores the currently set parameter values.
You can set parameters by assigning a named list of new parameters to this slot.

\code{$instantiate} materializes fixed training and test splits for a given task.

\code{$is_instantiated} returns \code{TRUE} if the resampling has been instantiated, and \code{FALSE} otherwise.

\code{$instance} stores the instantiated realization of the resampling. This is an arbitrary object, do
not work directly with it. Instead, use \code{$train_set()} and \code{$test_set()}.

\code{$train_set()} returns the training set for the \code{i}-th iteration.

\code{$test_set()} returns the test set for the \code{i}-th iteration.

\code{$hash} stores a checksum (\code{character(1)}) calculated on the \code{id}, \code{par_vals} and the instantiation.
If the object is not instantiated yet, \code{NA} is returned.
}

\examples{
r = mlr_resamplings$get("subsampling")

# Default parametrization
r$par_vals

# Do only 3 repeats on 10\% of the data
r$par_vals = list(ratio = 0.1, repeats = 3)
r$par_vals


# Instantiate on iris task
task = mlr_tasks$get("iris")
r$instantiate(task)

# Extract train/test sets
train_set = r$train_set(1)
print(train_set)
intersect(train_set, r$test_set(1))

# Another example: 10-fold CV
r = mlr_resamplings$get("cv")$instantiate(task)
r$train_set(1)
}
\seealso{
Other Resampling: \code{\link{mlr_resamplings}}
}
\concept{Resampling}
\keyword{internal}
