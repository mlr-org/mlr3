% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Task.R
\docType{data}
\name{Task}
\alias{Task}
\title{Task Class}
\format{\link[R6:R6Class]{R6::R6Class} object.}
\description{
This is the abstract base class for task objects like \link{TaskClassif} and \link{TaskRegr}.
Predefined tasks are stored in \link{mlr_tasks}.
}
\section{Construction}{
\preformatted{t = Task$new(id, task_type, backend)
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Name of the task.
\item \code{task_type} :: \code{character(1)}\cr
Set in the classes which inherit from this class.
Must be an element of \link[=mlr_reflections]{mlr_reflections$task_types}.
\item \code{backend} :: \link{DataBackend}
}
}

\section{Fields}{

\itemize{
\item \code{backend} :: \link{DataBackend}.
\item \code{col_info} :: \code{\link[data.table:data.table]{data.table::data.table()}}\cr
Table with with 3 columns:
Column names of \link{DataBackend} are stored in column\code{id}.
Column \code{type} holds the storage type of the variables, e.g. \code{integer}, \code{numeric} or \code{character}.
Column \code{levels} keeps a list of possible levels for factor and character variables.
\item \code{col_roles} :: named \code{list()}\cr
Each column (feature) can have an arbitrary number of roles in the learning task:
\itemize{
\item \code{"target"}: Labels to predict.
\item \code{"feature"}: Regular feature.
\item \code{"order"}: Data returned by \code{data()} is ordered by this column (or these columns).
\item \code{"groups"}: During resampling, observations with the same value of the variable with role "groups"
are marked as "belonging together". They will be exclusively assigned to be either in the training set
or the test set for each resampling iteration. Only a single column may be marked as grouping column.
\item \code{"weights"}: Observation weights. Only a single column may be marked as weights.
\code{col_roles} keeps track of the roles with a named list of vectors of feature names.
To alter the roles, use \code{t$set_col_role()}.
}
\item \code{row_roles} :: named \code{list()}\cr
Each row (observation) can have an arbitrary number of roles in the learning task:
\itemize{
\item \code{"use"}: Use in train / predict / resampling.
\item \code{"validation"}: Hold the observations back unless explicitly requested.
\code{row_roles} keeps track of the roles with a named list of vectors of feature names.
To alter the role, use \code{set_row_role()}.
}
\item \code{feature_names} :: \code{character()}\cr
Returns all column names with \code{role == "feature"}.
\item \code{feature_types} :: \code{\link[data.table:data.table]{data.table::data.table()}}\cr
Returns a table with columns \code{id} and \code{type} where \code{id} are the column names of "active" features of the task
and \code{type} is the storage type.
\item \code{formula} :: \code{formula()}\cr
Constructs a \link[stats:formula]{stats::formula}, e.g. \code{[target] ~ [feature_1] + [feature_2] + ... + [feature_k]}, using
the active features of the task.
\item \code{hash} :: \code{character(1)}\cr
Hash (unique identifier) for this object.
\item \code{id} :: \code{character(1)}\cr
Stores the identifier of the Task.
\item \code{measures} :: \code{list()} of \link{Measure}\cr
Stores the measures to use for this task.
\item \code{ncol} :: \code{integer(1)}\cr
Returns the total number of cols with role "target" or "feature".
\item \code{nrow} :: \code{integer(1)}\cr
Return the total number of rows with role "use".
\item \code{row_ids} :: (\code{integer()} | \code{character()})\cr
Returns the row ids of the \link{DataBackend} for observations with with role "use".
\item \code{target_names} :: \code{character()}\cr
Returns all column names with role "target".
\item \code{task_type} :: \code{character(1)}\cr
Stores the type of the \link{Task}.
\item \code{groups} :: \code{\link[data.table:data.table]{data.table::data.table()}}\cr
If the task has a designated column role "groups", table with two columns:
"row_id" (\code{integer()} | \code{character()}) and the grouping variable \code{group} (\code{vector()}).
Returns \code{NULL} if there are is no grouping column.
\item \code{weights} :: \code{\link[data.table:data.table]{data.table::data.table()}}\cr
If the task has a designated column role "weights", table with two columns:
"row_id" (\code{integer()} | \code{character()}) and the observation weights \code{weight} (\code{numeric()}).
Returns \code{NULL} if there are is no weight column.
}
}

\section{Methods}{

\itemize{
\item \code{data(rows = NULL, cols = NULL, format = NULL)}\cr
(\code{integer()} | \code{character()}, \code{character()}, \code{character(1)}) -> \code{any}\cr
Returns a slice of the data from the \link{DataBackend} in the format specified by \code{format}
(depending on the \link{DataBackend}, but usually a \code{\link[data.table:data.table]{data.table::data.table()}}).
Rows are subsetted to only contain observations with role "use".
Columns are filtered to only contain features with roles "target" and "feature".
If invalid \code{rows} or \code{cols} are specified, an exception is raised.
\item \code{cbind(data)}\cr
\code{data.frame()} -> \code{self}\cr
Extends the \link{DataBackend} with additional columns.
The row ids must be provided as column in \code{data} (with column name matching the primary key name of the \link{DataBackend}). If this column is missing, it is assumed that the rows are exactly in the order of
\code{t$row_ids}.
\item \code{rbind(data)}\cr
\code{data.frame()} -> \code{self}\cr
Extends the \link{DataBackend} with additional rows.
The new row ids must be provided as column in \code{data}.
If this column is missing, new row ids are constructed automatically.
\item \code{filter(rows)}\cr
(\code{integer()} | \code{character()}) -> \code{self}\cr
Subsets the task, reducing it to only keep the rows specified.
\item \code{select(cols)}\cr
\code{character()} -> \code{self}\cr
Subsets the task, reducing it to only keep the columns specified.
\item \code{levels(col)}\cr
\code{character()} -> named \code{list()}\cr
Returns  the distinct levels of the column \code{col}.
Only applicable for features with type "character",  "factor" or "ordered".
This function ignores the row roles, it returns all levels available in the \link{DataBackend}.
\item \code{head(n = 6)}\cr
\code{integer()} -> \code{\link[data.table:data.table]{data.table::data.table()}}\cr
Get the first \code{n} observations with role "use".
\item \code{replace_features(data)}\cr
\code{data.frame()} -> \code{self}\cr
Replaces some features of the task by constructing a completely new \link{DataBackendDataTable}.
This operation is similar to calling \code{select()} and \code{cbind()}, but explicitly copies the data.
\item \code{set_col_role(cols, new_roles, exclusive = TRUE)}\cr
(\code{character()}, \code{character()}, \code{logical(1)}) -> \code{self}\cr
Adds the roles \code{new_roles} to columns referred to by \code{cols}.
If \code{exclusive} is \code{TRUE}, the referenced columns will be removed from all other roles.
\item \code{set_row_role(rows, new_roles, exclusive = TRUE)}\cr
(\code{character()}, \code{character()}, \code{logical(1)}) -> \code{self}\cr
Adds the roles \code{new_roles} to rows referred to by \code{rows}.
If \code{exclusive} is \code{TRUE}, the referenced rows will be removed from all other roles.
}
}

\section{Task mutators}{

The methods \code{filter()}, \code{select()}, \code{rbind()}, and \code{cbind()} change the task in-place,
but without modifying the \link{DataBackend}.
\code{filter()} and \code{select()} just reduce the set of active rows or columns, providing a different view on the data.
\code{rbind()} and \code{cbind()} first create a new \link{DataBackendDataTable} from the provided new data, and then
merge both backends into an abstract \link{DataBackend} which combines the results on-demand.
}

\examples{
b = as_data_backend(iris)
task = Task$new("iris", task_type = "classif", backend = b)

task$nrow
task$ncol
task$head()
task$feature_names
task$formula

# Remove "Petal.Length"
task$set_col_role("Petal.Length", character(0L))

# Remove "Petal.Width", alternative way
task$select(setdiff(task$feature_names, "Petal.Width"))

task$feature_names

# Add new column "foo"
task$cbind(data.frame(foo = 1:150))
}
\seealso{
Other Task: \code{\link{TaskClassif}},
  \code{\link{TaskRegr}}, \code{\link{TaskSupervised}},
  \code{\link{mlr_generators}}, \code{\link{mlr_tasks}}
}
\concept{Task}
\keyword{datasets}
