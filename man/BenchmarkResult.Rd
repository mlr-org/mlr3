% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BenchmarkResult.R
\name{BenchmarkResult}
\alias{BenchmarkResult}
\title{Container for Results of \code{benchmark()}}
\description{
This is the object returned by \code{\link[=benchmark]{benchmark()}}.
}
\section{Usage}{
\preformatted{# Construction
bmr$new(data)
# Getters
bmr$data
bmr$tasks
bmr$learners
bmr$resamplings
bmr$measures
bmr$aggregated
bmr$resample_results
bmr$resample_result(hash)
bmr$combine(bmr)
bmr$get_best(measure)
# S3 methods
as.data.table(bmr)
}
}

\section{Arguments}{

\itemize{
\item \code{data} ():\cr
Argument of initialize.
\item \code{hash} (\code{character(1)}):\cr
String which identifies a subgroup to extract as \link{ResampleResult}.
\item \code{bmr} (\link{BenchmarkResult}):\cr
String which identifies a subgroup to extract as \link{ResampleResult}.
\item \code{measure} ():\cr
Argument of get_best
}
}

\section{Details}{

\itemize{
\item \code{$data} ???
\item \code{$tasks}, \code{$learners}, \code{$resamplings} and \code{$measures} return an overview table of involved objects.
\item \code{$aggregated} returns aggregated performance measures as a \code{\link[data.table:data.table]{data.table::data.table()}}.
Experiments are aggregated by their resample result group
(combination of \link{Task}, \link{Learner} and \link{Resampling}).
The actual aggregation function is defined by the respective \link{Measure}.
\item \code{$resample_results} returns a \code{\link[data.table:data.table]{data.table::data.table()}} which gives an overview of the
resample result groups in the benchmark.
These groups in the \link{BenchmarkResult} can be extracted as \link{ResampleResult} for further inspection.
\item \code{$resample_result()} creates the \link{ResampleResult} identified by the specified \code{hash} value.
\item \code{as.data.table()} converts a \link{BenchmarkResult} to a \code{\link[data.table:data.table]{data.table::data.table()}}.
}
}

\examples{
\dontshow{
   set.seed(123)
   .threshold = logger::log_threshold(namespace = "mlr3")
   logger::log_threshold(logger::WARN, namespace = "mlr3")
}
bmr = benchmark(
  tasks = mlr_tasks$mget("iris"),
  learners = mlr_learners$mget(c("classif.featureless", "classif.rpart")),
  resamplings = mlr_resamplings$mget("cv")
)

print(bmr)
bmr$tasks
bmr$learners
bmr$resamplings
bmr$measures
bmr$aggregated
rrs = bmr$resample_results
print(rrs)
rr = bmr$resample_result(rrs$hash[1])
print(rr)
rr$experiment(1)$model
\dontshow{
   logger::log_threshold(.threshold, namespace = "mlr3")
}
}
