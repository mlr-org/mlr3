% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Learner.R
\docType{data}
\name{Learner}
\alias{Learner}
\title{Learner Class}
\format{\link[R6:R6Class]{R6::R6Class} object.}
\description{
This is the abstract base class for learner objects like \link{LearnerClassif} and \link{LearnerRegr}.
Predefined learners are stored in \link{mlr_learners}.
}
\section{Construction}{
\preformatted{l = Learner$new(id, task_type, param_set = ParamSet$new(), param_vals = list(), predict_types = character(),
     feature_types = character(), properties = character(), packages = character())
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier for the learner.
\item \code{task_type} :: \code{character(1)}\cr
Type of the task the learner can operator on. E.g., \code{"classif"} or \code{"regr"}.
\item \code{param_set} :: \link[paradox:ParamSet]{paradox::ParamSet}\cr
Set of hyperparameters.
\item \code{param_vals} :: named \code{list()}\cr
List of hyperparameter settings.
\item \code{predict_types} :: \code{character()}\cr
Supported predict types. Must be a subset of \code{\link[=mlr_reflections]{mlr_reflections$learner_predict_types}}.
\item \code{feature_types} :: \code{character()}\cr
Feature types the learner operates on. Must be a subset of \code{mlr_reflections$task_feature_types}.
\item \code{properties} :: \code{character()}\cr
Set of properties of the learner. Must be a subset of \code{\link[=mlr_reflections]{mlr_reflections$learner_properties}}.
\item \code{data_formats} :: \code{character()}\cr
Vector of supported data formats which can be processed during \code{$train()} and \code{$predict()}.
Will be matched against the data formats supported by the \link{Task}, and the first data format specified
in the learner which is also supported by the task will be picked.
Defaults to \code{"data.table"}.
\item \code{packages} :: \code{character()}\cr
Set of required packages.
Note that these packages will be loaded via \code{\link[=requireNamespace]{requireNamespace()}}, and are not attached.
}
}

\section{Fields}{

\itemize{
\item \code{fallback} :: (\link{Learner} | \code{NULL})\cr
Optionally stores a second \link{Learner} which is activated as fallback if this first \link{Learner} fails during
train or predict.
This mechanism is disabled unless you explicitly assign a learner to this slot.
Additionally, you need to catch raised exceptions via encapsulation, see \code{\link[=mlr_control]{mlr_control()}}.
\item \code{feature_types} :: \code{character()}\cr
Stores the feature types the learner can handle, e.g. \code{"logical"}, \code{"numeric"}, or \code{"factor"}.
A complete list of candidate feature types, grouped by task type, is stored in \code{\link[=mlr_reflections]{mlr_reflections$task_feature_types}}.
\item \code{hash} :: \code{character(1)}\cr
Hash (unique identifier) for this object.
\item \code{id} :: \code{character(1)}\cr
Stores the identifier of the learner.
\item \code{packages} :: \code{character()}\cr
Stores the names of required packages.
\item \code{param_set} :: \link[paradox:ParamSet]{paradox::ParamSet}\cr
Description of available hyperparameters and hyperparameter settings.
\item \code{predict_type} :: \code{character(1)}\cr
Stores the currently selected predict type. Must be an element of \code{l$predict_types}.
\item \code{predict_types} :: \code{character()}\cr
Stores the possible predict types the learner is capable of.
A complete list of candidate predict types, grouped by task type, is stored in \code{\link[=mlr_reflections]{mlr_reflections$learner_predict_types}}.
\item \code{properties} :: \code{character()}\cr
Stores a set of properties/capabilities the learner has.
A complete list of candidate properties, grouped by task type, is stored in \code{\link[=mlr_reflections]{mlr_reflections$learner_properties}}.
\item \code{task_type} :: \code{character(1)}\cr
Stores the type of class this learner can operate on, e.g. \code{"classif"} or \code{"regr"}.
A complete list of task types is stored in \code{mlr_reflections$task_types}.
}
}

\section{Methods}{

\itemize{
\item \code{params(tag)}\cr
\code{character(1)} -> named \code{list()}\cr
Returns a list of hyperparameter settings from \code{param_set} where the corresponding parameters in \code{param_set} are tagged
with \code{tag}. I.e., \code{l$params("train")} returns all settings of hyperparameters used in the training step.
\item \code{train(task)}\cr
\link{Task} -> \code{self}\cr
Train the learner on the complete \link{Task}. The resulting model is stored in \code{l$model}.
\item \code{predict(task)}\cr
\link{Task} -> \link{Prediction}\cr
Uses \code{l$model} (fitted during \code{train()}) to return a \link{Prediction} object.
}
}

\section{Optional Extractors}{


Specific learner implementations are free to implement additional getters to ease the access of certain parts
of the model in the inherited subclasses.

For the following operations, extractors are standardized:
\itemize{
\item \code{importance(...)}: Returns a feature importance score as \code{numeric()}.
The learner must be tagged with property "importance".

The higher the score, the more important the variable.
The returned vector is named with feature names and sorted in decreasing order.
Note that the model might omit features it has not used at all.
\item \code{selected_features(...)}: Returns a subset of selected features as \code{character()}.
The learner must be tagged with property "selected_features".
}
}

\seealso{
Other Learner: \code{\link{LearnerClassif}},
  \code{\link{LearnerRegr}}, \code{\link{mlr_learners}}
}
\concept{Learner}
\keyword{datasets}
