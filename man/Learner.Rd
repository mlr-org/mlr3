% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Learner.R
\name{Learner}
\alias{Learner}
\title{Learner Class}
\format{\link{R6Class} object.}
\description{
Predefined learners are stored in \link{mlr_learners}.
}
\section{Usage}{
\preformatted{# Construction
l = Learner$new(id, task_type, feature_types= character(0L), predict_types = character(0L), packages = character(0L), param_set = ParamSet$new(), param_vals = list(), properties = character(0L))
l = LearnerClassif$new(id, feature_types = character(0L), predict_types = "response", packages = character(0L), param_set = ParamSet$new(), param_vals = list(), properties = character(0L))
l = LearnerRegr$new(id, feature_types = character(0L), predict_types = "response", packages = character(0L), param_set = ParamSet$new(), param_vals = list(), properties = character(0L))

# Members
l$fallback
l$feature_types
l$hash
l$id
l$model
l$packages
l$param_set
l$predict_type
l$predict_types
l$properties
l$task_type

# Methods
l$train(task)
l$predict(task)
l$params(tag)
}
}

\section{Arguments}{

\itemize{
\item \code{id} (\code{character(1)}): Identifier for this object.
\item \code{task_type} (\code{character(1)}): Type of the task the learner can operator on. E.g., \code{"classif"} or \code{"regr"}.
\item \code{feature_types} (\code{character()}): Feature types the learner operates on. Must be a subset of \code{mlr_reflections$task_feature_types}.
\item \code{predict_types} (\code{character()}): Supported predict types. Must be a subset of \code{mlr_reflections$predict_types}.
\item \code{packages} (\code{character()}]: Set of required packages.
\item \code{param_set} (\link[paradox:ParamSet]{paradox::ParamSet}): Set of hyperparameters.
\item \code{param_vals} (named \code{list()}): List of hyperparameter settings.
\item \code{properties} (\code{character()}): Set of properties of the learner. Must be a subset of \code{mlr_reflections$learner_properties}.
\item \code{task} (\link{Task}): Task to train/predict on.
\item \code{tag} (\code{character(1)}): Tag of parameters.
}
}

\section{Details}{

\itemize{
\item \code{$fallback} (\link{Learner} | \code{NULL}) optionally stores a fallback learner which
is used to generate predictions if this learner fails to train or predict.
This mechanism is disabled unless you explicitly assign a learner to this slot.
\item \code{$feature_types} (\code{character()}) stores the feature types the learner can
handle, e.g. \code{"logical"}, \code{"numeric"}, or \code{"factor"}.
\item \code{$hash} (\code{character(1)}) stores a checksum calculated on the \code{id} and \code{param_vals}.
This hash is cached internally.
\item \code{$id} (\code{character(1)}) stores the identifier of the object.
\item \code{$packages} (\code{character()}) stores the names of required packages.
\item \code{$param_set} (\link[paradox:ParamSet]{paradox::ParamSet}) describes the available hyperparameter
and possible settings.
\item \code{$params()} returns a list of hyperparameter settings from \code{param_vals} where the corresponding parameters in \code{param_set} are tagged
with \code{tag}. I.e., \code{l$params("train")} returns all settings of hyperparameters used in the training step.
\item \code{$predict_type} (\code{character(1)}) stores the currently selected predict type.
\item \code{$predict_types} (\code{character()}) stores the possible predict types the learner
is capable of. For classification, feasible values are \code{"response"} and
\code{"prob"}, for regression \code{"response"} and \code{"se"} can be specified.
\item \code{$properties} (\code{character()}) is a set of tags which describe the properties
of the learner.
\item \code{$task_type} (\code{character(1)}) stores the type of class this learner can
operate on, e.g. \code{"classif"} or \code{"regr"}.
\item \code{$new()} creates a new object of class \link{Learner}.
\item \code{$predict()} takes a \link{Task} and uses \code{self$model} (fitted during train())
to return a \link{Prediction} object.
\item \code{$train()} takes a \link{Task}, sets the slot \code{model} and returns \code{self}.
}
}

\section{Optional Extractors}{


Specific learner implementations are free to implement additional getters to ease the access of certain parts
of the model in the inherited subclasses.

For the following operations, extractors are standardized:
\itemize{
\item \code{importance(...)}: Returns a feature importance score as \code{numeric()}.
The learner must be tagged with property "importance".

The higher the score, the more important the variable.
The returned vector is named with feature names and sorted in decreasing order.
Note that the model might omit features it has not used at all.
\item \code{selected_features(...)}: Returns a subset of selected features as \code{character()}.
The learner must be tagged with property "selected_features".
}
}

\seealso{
Other Learner: \code{\link{LearnerClassif}},
  \code{\link{LearnerRegr}}, \code{\link{mlr_learners}}
}
\concept{Learner}
