% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Learner.R
\docType{data}
\name{Learner}
\alias{Learner}
\title{Learner Class}
\format{\link[R6:R6Class]{R6::R6Class} object.}
\description{
This is the abstract base class for learner objects like \link{LearnerClassif} and \link{LearnerRegr}.

Learners consist of the following parts:
\itemize{
\item Methods \code{train()} and \code{predict()} to perform the respective steps.
\item The fitted model, after calling \code{train()}.
\item A \link[paradox:ParamSet]{paradox::ParamSet} which stores meta-information about available hyperparameters, and also stores hyperparameter settings.
\item Meta-information about the requirements and capabilities of the learner.
}

Predefined learners are stored in the \link{Dictionary} \link{mlr_learners},
e.g. \code{\link[=mlr_learners_classif.rpart]{classif.rpart}} or \code{\link[=mlr_learners_regr.rpart]{regr.rpart}}.
}
\section{Construction}{

Note: This object is typically constructed via a derived classes, e.g. \link{LearnerClassif} or \link{LearnerRegr}.\preformatted{l = Learner$new(id, task_type, param_set = ParamSet$new(), param_vals = list(), predict_types = character(),
     feature_types = character(), properties = character(), packages = character())
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier for the learner.
\item \code{task_type} :: \code{character(1)}\cr
Type of the task the learner can operator on. E.g., \code{"classif"} or \code{"regr"}.
\item \code{param_set} :: \link[paradox:ParamSet]{paradox::ParamSet}\cr
Set of hyperparameters.
\item \code{param_vals} :: named \code{list()}\cr
List of hyperparameter settings.
\item \code{predict_types} :: \code{character()}\cr
Supported predict types. Must be a subset of \code{\link[=mlr_reflections]{mlr_reflections$learner_predict_types}}.
\item \code{feature_types} :: \code{character()}\cr
Feature types the learner operates on. Must be a subset of \code{mlr_reflections$task_feature_types}.
\item \code{properties} :: \code{character()}\cr
Set of properties of the learner. Must be a subset of \code{\link[=mlr_reflections]{mlr_reflections$learner_properties}}.
\item \code{data_formats} :: \code{character()}\cr
Vector of supported data formats which can be processed during \code{$train()} and \code{$predict()}.
Defaults to \code{"data.table"}.
\item \code{packages} :: \code{character()}\cr
Set of required packages.
Note that these packages will be loaded via \code{\link[=requireNamespace]{requireNamespace()}}, and are not attached.
}
}

\section{Fields}{

\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of the learner.
\item \code{task_type} :: \code{character(1)}\cr
Stores the type of class this learner can operate on, e.g. \code{"classif"} or \code{"regr"}.
A complete list of task types is stored in \code{\link[=mlr_reflections]{mlr_reflections$task_types}}.
\item \code{param_set} :: \link[paradox:ParamSet]{paradox::ParamSet}\cr
Description of available hyperparameters and hyperparameter settings.
\item \code{predict_types} :: \code{character()}\cr
Stores the possible predict types the learner is capable of.
A complete list of candidate predict types, grouped by task type, is stored in \code{\link[=mlr_reflections]{mlr_reflections$learner_predict_types}}.
\item \code{predict_type} :: \code{character(1)}\cr
Stores the currently selected predict type. Must be an element of \code{l$predict_types}.
\item \code{feature_types} :: \code{character()}\cr
Stores the feature types the learner can handle, e.g. \code{"logical"}, \code{"numeric"}, or \code{"factor"}.
A complete list of candidate feature types, grouped by task type, is stored in \code{\link[=mlr_reflections]{mlr_reflections$task_feature_types}}.
\item \code{properties} :: \code{character()}\cr
Stores a set of properties/capabilities the learner has.
A complete list of candidate properties, grouped by task type, is stored in \code{\link[=mlr_reflections]{mlr_reflections$learner_properties}}.
\item \code{packages} :: \code{character()}\cr
Stores the names of required packages.
\item \code{hash} :: \code{character(1)}\cr
Hash (unique identifier) for this object.
\item \code{fallback} :: \link{Learner}\cr
Learner which is used as a fallback to repair predictions in the following situations:
\itemize{
\item The model fit fails during \code{train()}
\item The prediction fails during \code{predict()}
\item Prediction resulted in missing values for some observations (as reported by \code{$missing} of \link{Prediction})
}

If one of these cases is detected, the following applies during \code{predict()} of the top level learner:
\itemize{
\item \code{fallback$train()} is called on the training set of the top level learner
\item \code{fallback$predict()} is called on the (subset of the) test set for which predictions are missing
\item The predictions of the top level learner are augmented with the predictions of the fallback learner
\item The fallback learner is discarded
}

Note that the fallback learner runs without any encapsulation (see \code{\link[=mlr_control]{mlr_control()}}),
and its output is not captured in the learner log.
}
}

\section{Methods}{

\itemize{
\item \code{params(tag)}\cr
\code{character(1)} -> named \code{list()}\cr
Returns a list of hyperparameter settings from \code{param_set} where the corresponding parameters in \code{param_set} are tagged
with \code{tag}. I.e., \code{l$params("train")} returns all settings of hyperparameters relevant in the training step.
\item \code{train(task)}\cr
\link{Task} -> \link{Learner}\cr
Train the learner on the complete \link{Task}, sets \code{self$model} to the learner model and returns itself.
\item \code{predict(task)}\cr
\link{Task} -> \link{Prediction}\cr
Uses \code{model} (fitted and stored during \code{train()}) to return a \link{Prediction} object.
Note: Argument \code{model} defaults to the model stored inside the learner.
The learner and the model are stored separately for performance reasons.
However, if you retrieve the learner via the \link{Experiment}, \code{mlr3} automatically inserts the model into the slot \code{$model},
so that you do not need to pass the model to each method of the learner yourself.
}
}

\section{Optional Extractors}{


Specific learner implementations are free to implement additional getters to ease the access of certain parts
of the model in the inherited subclasses.

For the following operations, extractors are standardized:
\itemize{
\item \code{importance(...)}: Returns a feature importance score as \code{numeric()}.
The learner must be tagged with property "importance".

The higher the score, the more important the variable.
The returned vector is named with feature names and sorted in decreasing order.
Note that the model might omit features it has not used at all.
\item \code{selected_features(...)}: Returns a subset of selected features as \code{character()}.
The learner must be tagged with property "selected_features".
\item \code{oob_error(...)}: Returns the out-of-bag error of the model as \code{numeric(1)}.
The learner must be tagged with property "oob_error".
}
}

\section{Setting Hyperparameters}{


All information about hyperparameters is stored in the slot \code{param_set} which is a \link[paradox:ParamSet]{paradox::ParamSet}.
The printer gives an overview about the ids of available hyperparameters, their storage type, lower and upper bounds,
possible levels (for factors), default values and assigned values.
To set hyperparameters, assign a named list to the subslot \code{values}:\preformatted{lrn = mlr_learners$get("classif.rpart")
lrn$param_set$values = list(minsplit = 3, cp = 0.01)
}

Note that this operation erases all previously set hyperparameter values.
If you only intend to change one specific hyperparameter value and leave the others as-is, you can use the helper function \code{\link[mlr3misc:insert_named]{mlr3misc::insert_named()}}:\preformatted{lrn$param_set$values = mlr3misc::insert_named(lrn$param_set$values, list(cp = 0.001))
}

If the learner has additional hyperparameters which are not encoded in the \link[paradox:ParamSet]{ParamSet}, you can easily extend the learner.
Here, we add a hyperparameter with id "foo" possible levels "a" and "b":\preformatted{lrn$param_set$add(paradox::ParamFct$new("foo", levels = c("a", "b")))
}
}

\seealso{
Other Learner: \code{\link{LearnerClassif}},
  \code{\link{LearnerRegr}}, \code{\link{mlr_learners}}
}
\concept{Learner}
\keyword{datasets}
